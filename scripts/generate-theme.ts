import fs from 'fs'
import path from 'path'

import allColors from 'tailwindcss/colors'

import { defaultColors } from '../src/themes'

export async function generateTheme() {
    const userConfigPath = path.resolve(process.cwd(), 'ui.config.ts')
    let userColors: Record<string, string> = {}

    // Load ui.config.ts if it exists
    if (fs.existsSync(userConfigPath)) {
        try {
            const userConfigModule = await import(`file://${userConfigPath}?t=${Date.now()}`)
            const config = userConfigModule.default || {}
            userColors = config.colors || {}
        } catch (error) {
            console.error('[svui] ❌ Failed to load ui.config.ts:', error)
        }
    }

    const mergedColors = { ...defaultColors, ...userColors }

    // === Generate colors.d.ts ===
    const colorKeys = Object.keys(mergedColors)
    const dtsContent = `
		// This file is automatically generated
		export type ColorName = ${colorKeys.map((key) => `'${key}'`).join(' | ')};
		
		export interface Colors {
		  	${colorKeys.map((key) => `${key}: string;`).join('\n')}
		}
  `

    const colorsDtsPath = path.resolve(process.cwd(), 'src/lib/types/colors.d.ts')
    fs.mkdirSync(path.dirname(colorsDtsPath), { recursive: true })
    fs.writeFileSync(colorsDtsPath, dtsContent, 'utf8')

    console.log('[svui] ✅ colors.d.ts generated at src/lib/types/colors.d.ts')

    // === Generate theme.css ===
    const lines: string[] = ['@theme static {']
    for (const [key, name] of Object.entries(mergedColors)) {
        const tailwindColor = (allColors as Record<string, any>)[name]
        if (typeof tailwindColor === 'object') {
            lines.push(`  --color-${key}: ${tailwindColor['500']};`)
            for (const [shade, value] of Object.entries(tailwindColor)) {
                lines.push(`  --color-${key}-${shade}: ${value};`)
            }
        } else {
            lines.push(`  --color-${key}: ${tailwindColor};`)
        }
    }
    lines.push('}')
    const themeCss = lines.join('\n')

    const themeOutputPath = path.resolve(process.cwd(), 'src/generated/theme.css')
    fs.mkdirSync(path.dirname(themeOutputPath), { recursive: true })
    fs.writeFileSync(themeOutputPath, themeCss, 'utf8')

    console.log('[svui] ✅ theme.css generated at src/generated/theme.css')

    // === Generate colors-safelist.css ===
    const basePrefixes = [
        'bg',
        'text',
        'border',
        'ring',
        'outline'
        // 'decoration',
        // 'stroke',
        // 'fill',
        // 'accent',
        // 'divide',
        // 'placeholder',
        // 'shadow'
    ]
    const variants = ['hover:', 'focus:', 'focus-visible:', 'active:', 'disabled:', 'aria-disabled:', '']

    const shadeStr = '-{50,{100..900..100},950}'
    const opacityLevels = Array.from({ length: 21 }, (_, i) => i * 5)

    const generateSafelistLines = (
        prefix: string,
        includeVariants = true,
        includeShades = true,
        includeOpacity = true
    ): string[] => {
        const variantStr = includeVariants ? `{${variants.join(',')}}` : ''

        const noShade = `${variantStr}${prefix}-{${colorKeys.join(',')}}`
        const withShade = `${variantStr}${prefix}-{${colorKeys.join(',')}}${includeShades ? shadeStr : ''}`

        // Add opacity if necessary
        const opacityStr = includeOpacity ? `/{${opacityLevels.join(',')}}` : ''

        const lines = [`@source inline("${noShade}");`]
        lines.push(`@source inline("${noShade}${opacityStr}");`)
        if (includeShades) {
            lines.push(`@source inline("${withShade}");`)
            lines.push(`@source inline("${withShade}${opacityStr}");`)
        }

        return lines
    }

    const safelistLines = basePrefixes.flatMap((prefix) =>
        generateSafelistLines(prefix, true, prefix !== 'shadow', true)
    )

    const safelistOutputPath = path.resolve('src/generated/colors-safelist.css')
    fs.writeFileSync(safelistOutputPath, safelistLines.join('\n'), 'utf8')

    console.log('[svui] ✅ colors-safelist.css generated at src/generated/colors-safelist.css')
}

// CLI support
if (import.meta.url === `file://${process.argv[1]}`) {
    generateTheme().catch(console.error)
}
